# üîß PROTOCOLO DE DIAGN√ìSTICO Y REPARACI√ìN - Sistema de Desanonimizaci√≥n

## ‚ö†Ô∏è PROCESO OBLIGATORIO: Diagnostica ‚Üí Confirma ‚Üí Repara

Has recibido un reporte de auditor√≠a que muestra que **5/5 archivos tienen IDs an√≥nimos sin reemplazar**. Antes de modificar c√≥digo, debes entender **POR QU√â** fallaron.

---

## PASO 1: Entender el Flujo Completo del Sistema (10 min)

### 1.1 Mapear el Pipeline

Documenta el flujo actual:
```
[Screenshots PokerCraft] 
    ‚Üì
[Extracci√≥n de nombres - ¬øQu√© componente?]
    ‚Üì
[Matching con TXT - ¬øQu√© componente?]
    ‚Üì
[Generaci√≥n de mappings - ¬øD√≥nde se guardan?]
    ‚Üì
[Writer que reemplaza IDs - ¬øArchivo actual?]
    ‚Üì
[Output: resolved.txt]
```

**Preg√∫ntate:**
- ¬øD√≥nde se generan los mappings?
- ¬øEn qu√© formato se almacenan? (JSON, DB, memoria)
- ¬øC√≥mo llegan al writer?

---

## PASO 2: Localizar y Verificar los Mappings del Job #12 (30 min)

### 2.1 Encuentra los datos del Job #12

Los archivos problem√°ticos son:
- `7639_resolved.txt`
- `8265_resolved.txt` 
- `10553_resolved.txt`
- `12253_resolved.txt`
- `12614_resolved.txt`

**Busca los datos originales de este job:**
```bash
# ¬øHay archivos de mappings?
find . -name "*7639*" -o -name "*8265*" -o -name "*job*12*"

# ¬øHay un directorio de trabajo del job?
ls -la jobs/ processing/ temp/ outputs/

# ¬øHay base de datos?
# Si s√≠, consulta los mappings para estos hand IDs
```

### 2.2 Extraer los IDs problem√°ticos y verificarlos

Crea un script de verificaci√≥n:
```python
"""
PASO 2: Verificador de Mappings
Ejecutar ANTES de tocar cualquier c√≥digo
"""

# IDs an√≥nimos que NO fueron reemplazados (de la auditor√≠a)
PROBLEMATIC_IDS = {
    '7639_resolved.txt': {
        'hand_id': 'SG3260931612',
        'anon_ids': ['478db80b']  # big blind
    },
    '8265_resolved.txt': {
        'hand_id': 'SG3260934198',
        'anon_ids': ['cdbe28b6', '89444161']  # SB y BB
    },
    '10553_resolved.txt': {
        'hand_id': 'SG3260947338',
        'anon_ids': ['3d54adc0']  # big blind
    },
    '12253_resolved.txt': {
        'hand_id': 'SG3261001347',
        'anon_ids': ['e3efcaed', '5641b4a0']  # SB y BB
    },
    '12614_resolved.txt': {
        'hand_id': 'SG3261002599',
        'anon_ids': ['9d830e65', '8d2e730f']  # BB y showdown
    }
}

def verificar_mappings():
    """
    Para CADA ID an√≥nimo, verifica:
    1. ¬øExiste en los mappings originales?
    2. Si existe, ¬øcu√°l es su nombre resuelto?
    3. Si existe, ¬øcu√°l es su confidence score?
    """
    
    # TODO: Cargar tus mappings reales aqu√≠
    # mappings = cargar_mappings_del_job_12()
    
    resultados = {
        'encontrados': [],
        'faltantes': [],
        'total': 0
    }
    
    for filename, data in PROBLEMATIC_IDS.items():
        print(f"\n{'='*60}")
        print(f"Archivo: {filename}")
        print(f"Hand ID: {data['hand_id']}")
        print(f"{'='*60}")
        
        for anon_id in data['anon_ids']:
            resultados['total'] += 1
            
            # TODO: Buscar este anon_id en tus mappings
            # mapping = buscar_mapping(anon_id, data['hand_id'])
            
            # if mapping:
            #     print(f"‚úÖ {anon_id}")
            #     print(f"   ‚Üí Nombre: {mapping.resolved_name}")
            #     print(f"   ‚Üí Confianza: {mapping.confidence_score}")
            #     resultados['encontrados'].append({
            #         'id': anon_id,
            #         'mapping': mapping
            #     })
            # else:
            #     print(f"‚ùå {anon_id} - NO ENCONTRADO EN MAPPINGS")
            #     resultados['faltantes'].append(anon_id)
    
    return resultados

if __name__ == '__main__':
    resultados = verificar_mappings()
    
    print(f"\n\n{'='*60}")
    print("RESUMEN DE DIAGN√ìSTICO")
    print(f"{'='*60}")
    print(f"Total IDs problem√°ticos: {resultados['total']}")
    print(f"Encontrados en mappings: {len(resultados['encontrados'])}")
    print(f"Faltantes en mappings: {len(resultados['faltantes'])}")
    
    # Determinar causa ra√≠z
    if len(resultados['faltantes']) == 0:
        print("\nüéØ DIAGN√ìSTICO: PROBLEMA DE WRITER")
        print("Todos los IDs est√°n mapeados pero no se reemplazan en el TXT")
        print("CAUSA: Bug en los patrones regex del writer")
    elif len(resultados['faltantes']) == resultados['total']:
        print("\nüéØ DIAGN√ìSTICO: PROBLEMA DE MATCHING")
        print("Ning√∫n ID fue mapeado correctamente")
        print("CAUSA: Fallo en la extracci√≥n/matching con screenshots")
    else:
        print("\nüéØ DIAGN√ìSTICO: PROBLEMA MIXTO")
        print("Algunos IDs est√°n mapeados, otros no")
        print("CAUSA: Problemas en matching Y en writer")
```

---

## PASO 3: Interpretar Resultados y Tomar Acci√≥n

### üìä ESCENARIO A: Todos los IDs est√°n en mappings (100%)

**Diagn√≥stico:** El matching con Gemini Vision funcion√≥ correctamente. El problema es solo en el writer.

**Causa m√°s probable:** Patrones regex incorrectos.

**Acci√≥n:**

1. Revisa los patrones regex en tu writer
2. Busca espec√≠ficamente patrones para:
   - `posts small blind`
   - `posts big blind`
   - `shows [cards]`
3. Verifica si est√°n usando formato correcto (con/sin `$`, espacios, etc.)
4. Compara con el formato real de los archivos TXT originales
5. Implementa los fixes necesarios
6. Re-procesa el Job #12

---

### üìä ESCENARIO B: Ning√∫n ID est√° en mappings (0%)

**Diagn√≥stico:** El matching fall√≥ completamente. El writer no tiene la culpa.

**Causa m√°s probable:** Problema con Gemini Vision o el proceso de matching.

**Acci√≥n:**

1. **NO toques el writer todav√≠a**
2. Revisa las screenshots del Job #12:
   - ¬øSe capturaron correctamente?
   - ¬øTienen buena calidad/resoluci√≥n?
   - ¬øSon del formato correcto (PokerCraft)?
3. Revisa los prompts a Gemini Vision:
   - ¬øEst√°n pidiendo extraer nombres de jugadores?
   - ¬øEst√°n pidiendo extraer IDs an√≥nimos?
4. Revisa el proceso de matching:
   - ¬øC√≥mo se correlacionan screenshots con manos del TXT?
   - ¬øSe est√° usando timestamp, cartas, posiciones?
5. Implementa fixes en el matching
6. Re-procesa el Job #12

---

### üìä ESCENARIO C: Algunos IDs est√°n, otros no (mixto)

**Diagn√≥stico:** Tienes problemas en AMBOS lados del sistema.

**Acci√≥n:**

1. Separa los IDs en dos categor√≠as:
   - **Grupo A:** IDs que S√ç est√°n en mappings ‚Üí Fix writer
   - **Grupo B:** IDs que NO est√°n en mappings ‚Üí Fix matching
2. Analiza patrones:
   - ¬øLos IDs faltantes tienen algo en com√∫n?
   - ¬øSon todos de blind posts? ¬øDe shows?
   - ¬øSon de manos espec√≠ficas o screenshots espec√≠ficas?
3. Prioriza el fix m√°s impactante primero
4. Implementa ambos fixes
5. Re-procesa el Job #12

---

## PASO 4: Implementar Fix Correcto Seg√∫n Diagn√≥stico

**No implementes un fix hasta completar el diagn√≥stico de los pasos 1-3.**

### Si el problema es el Writer:

1. Identifica todos los patrones regex que est√°n fallando
2. Compara con el formato real de los archivos GGPoker
3. Corrige los patrones
4. Agrega los patrones faltantes (ej: shows cards)
5. Agrega validaci√≥n que detecte IDs residuales

### Si el problema es el Matching:

1. Revisa el pipeline de Gemini Vision
2. Mejora los prompts si es necesario
3. Agrega m√°s validaci√≥n en el matching
4. Mejora el algoritmo de correlaci√≥n screenshot-TXT

### Si es problema mixto:

1. Arregla primero el matching (m√°s cr√≠tico)
2. Luego arregla el writer
3. Valida que ambos funcionen juntos

---

## PASO 5: Validaci√≥n Post-Fix

Despu√©s de implementar el fix:
```python
"""
Validador post-fix
"""
def validar_fix():
    # 1. Re-procesar Job #12 con c√≥digo corregido
    nuevos_archivos = procesar_job_12()
    
    # 2. Ejecutar el validador de auditor√≠a
    resultados = validar_archivos_resolved(nuevos_archivos)
    
    # 3. Verificar m√©tricas de √©xito
    assert resultados['archivos_validos'] == 5, "Todos deben ser v√°lidos"
    assert resultados['total_errores'] == 0, "Cero errores esperados"
    assert resultados['ids_anonimos'] == 0, "Cero IDs an√≥nimos residuales"
    
    print("‚úÖ FIX VALIDADO - Sistema funcionando correctamente")
```

---

## ‚úÖ CHECKLIST DE PROCESO

Marca cada paso al completarlo:

- [ ] **PASO 1:** Document√© el flujo completo del sistema
- [ ] **PASO 2:** Localic√© los mappings del Job #12
- [ ] **PASO 2:** Verifiqu√© cada ID an√≥nimo problem√°tico
- [ ] **PASO 3:** Calcul√© % de IDs en mappings
- [ ] **PASO 3:** Determin√© escenario (A, B, o C)
- [ ] **PASO 3:** Identifiqu√© causa ra√≠z correcta
- [ ] **PASO 4:** Implement√© fix apropiado al diagn√≥stico
- [ ] **PASO 5:** Re-proces√© Job #12
- [ ] **PASO 5:** Valid√© que archivos son 100% correctos
- [ ] **PASO 5:** Confirm√© importaci√≥n exitosa a PokerTracker

---

## üö® REGLAS CR√çTICAS

1. **NO modifiques c√≥digo sin completar el diagn√≥stico**
2. **NO asumas que conoces la causa sin verificar mappings**
3. **NO arregles solo el writer si el matching est√° fallando**
4. **S√ç documenta tus hallazgos en cada paso**
5. **S√ç valida el fix antes de marcarlo como completo**

---

## üì§ REPORTE QUE DEBES ENTREGAR

Al finalizar, reporta:
```
DIAGN√ìSTICO COMPLETADO - JOB #12

Escenario encontrado: [A/B/C]
Causa ra√≠z: [Descripci√≥n]

Mappings verificados:
- Total IDs problem√°ticos: X
- Encontrados en mappings: Y
- Faltantes en mappings: Z

Fixes implementados:
1. [Descripci√≥n del fix]
2. [Descripci√≥n del fix]

Resultados post-fix:
- Archivos v√°lidos: 5/5
- Errores: 0
- IDs an√≥nimos residuales: 0

Estado: ‚úÖ RESUELTO / ‚ö†Ô∏è EN PROCESO / ‚ùå REQUIERE INVESTIGACI√ìN ADICIONAL
```

---

**COMIENZA POR EL PASO 1 Y NO TE SALTES NING√öN PASO.**